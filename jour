#!/usr/bin/env python3.5
import argparse
import configparser
from datetime import datetime, timedelta
import logging
import os
from os.path import expanduser
import subprocess
import sys

__doc__ = \
"""
Write, read, and edit your journal. Calling jour with no arguments will open
today's journal entry for writing.

jour relies on a few environment variables:

    $EDITOR - for editing a journal entries.
        Default: /usr/bin/vi

    $PAGER - for reading journal entries.
        Default: /bin/more

    $JOURNAL_DIR - the directory to store your journal entries.
        Default: ~/journal

The default naming schema for new entries is <year>.<month>.<day> with each
number zero-padded properly. Currently there is no option to change this.
"""

EDITOR = os.environ.get('EDITOR', '/usr/bin/vi')
PAGER = os.environ.get('PAGER', '/bin/more')
JOURNAL_DIR = os.environ.get('JOURNAL_DIR', expanduser("~/journal"))
CONFIG_DIR = os.environ.get('XDG_CONFIG_HOME', expanduser("~/.config"))
CONFIG_FILE_NAME = 'jour.conf'
DEFAULT_FORMAT = '{y}.{m}.{d}'


class Entry(object):
    """Represents a journal entry."""
    def __init__(self, date, journal_dir):
        """
        Create a new Entry object initialized to the given date and the
        corresponding journal file if it exists.
        """
        self.date = date
        self.path = os.path.join(os.sep, journal_dir, date)
        self.content = self._parse_content()
        self.tags = self._parse_tags() if self.content is not None else None

    def _parse_content(self):
        """Parses the file to a list of lines."""
        if os.path.exists(self.path):
            with open(self.path) as f:
                return f.readlines()
        else:
            return None

    def _parse_tags(self):
        """Checks the file for a tags section and lists the tags if any."""
        tags = [
            [w.strip() for w in line.strip("tags:").split(",")]
            for line in self.content if "tags" in line
        ]
        return tags[0] if len(tags) > 0 else None


class dateAction(argparse.Action):
    "TODO"
    def __init__(self, option_strings, dest, **kwargs):
        pass

    def __call__(self, parser, namespace, values, option_string):
        pass


def askToMakeDir(journal_dir, retries=4, reminder='Please try again!'):
    """
    Asks the user to create the journal directory.

    Will ask the user (retries) times or until they enter y or n.
    If the user enters anything other than y or n (reminder) will be printed.
    """
    while True:
        ok = input('Can not find journal dir. Wanna make it? ')
        if ok in ('y', 'ye', 'yes', 'Y'):
            os.makedirs(journal_dir)
            return True
        if ok in ('n', 'no', 'nop', 'nope', 'N'):
            raise NotADirectoryError("{0} does not exist.".format(journal_dir))
            return False
        retries = retries - 1
        if retries < 0:
            raise ValueError('invalid user response')
        print(reminder)


def check(journal_dir):
    """
    Checks whether the journal directory exists and prompts the user to create
    it if it doesn't.
    """
    if not os.path.exists(journal_dir):
        askToMakeDir(journal_dir)


def format_date(dt, conf):
    """Takes a datetime object and returns a string using the configured format."""
    def fmt(n):
        return "{0:02d}".format(n)

    s = list(map(fmt, [dt.year, dt.month, dt.day]))
    format_string = get_config_option(conf, 'filename_format')
    return format_string.format(y=s[0], m=s[1], d=s[2])


def load_config(config_file=None):
    """
    Load a configuration file and return a config parser (i.e. dictionary) with
    the settings.
    """
    # Set default config options
    config = configparser.ConfigParser(defaults={
        'filename_format': DEFAULT_FORMAT,
        'journal_dir': JOURNAL_DIR,
        'editor': EDITOR,
        'pager': PAGER
    })

    if config_file is None:
        config_file = os.path.join(os.sep, CONFIG_DIR, CONFIG_FILE_NAME)
    config.read(config_file)

    return config


def get_config_option(conf, key):
    """
    Get a configuration option from the config dictionary.

    Uses either the main section (if it exists) or the DEFAULT section if there
    is no main section. Will raise an exception if the key isn't found.
    """
    if 'main' in conf:
        return conf['main'].get(key)
    else:
        return conf['DEFAULT'].get(key)


# Commands ###################################################################
def list_entries(args, conf):
    """Prints a list of journal entries."""
    journal_dir = get_config_option(conf, 'journal_dir')
    entries = os.listdir(journal_dir)
    for e in sorted(entries):
        entry = Entry(e, journal_dir)
        if entry.tags is not None:
            print("{0} : {1}".format(entry.date, ", ".join(entry.tags)))
        else:
            print(entry.date)

    exit(0)


def read_entry(args, conf):
    """Prints today's journal entry."""
    journal_dir = get_config_option(conf, 'journal_dir')
    pager = get_config_option(conf, 'pager')
    e = Entry(args.date, journal_dir)
    if e.content is not None:
        print(e.path)
        subprocess.call([pager, e.path])
        exit(0)
    else:
        print("You haven't journaled yet today!")
        exit(1)


def write_entry(args, conf):
    """Opens today's journal entry in the editor."""
    journal_dir = get_config_option(conf, 'journal_dir')
    editor = get_config_option(conf, 'editor')
    e = Entry(args.date, journal_dir)
    subprocess.call([editor, e.path])
    exit(0)


# CLI #######################################################################
def main():
    """Main function"""
    cli = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=__doc__
    )

    cli.add_argument(
        '-d',
        '--date',
        default=datetime.now().strftime('%Y-%m-%d'),
        help="Set the date for the entry (YYYY-MM-DD). Defaults to today."
    )

    cli.add_argument(
        '-c',
        '--config',
        default=None,
        help="Full path to configuration file."
    )

    cli.add_argument(
        '-y',
        '--yesterday',
        action='store_true',
        help="Open yesterday's journal entry."
    )

    commands = cli.add_subparsers(dest="command")

    commands.add_parser('ls').set_defaults(command=list_entries)
    commands.add_parser('read').set_defaults(command=read_entry)

    args = cli.parse_args()

    conf = load_config(args.config)

    # Reformat the date according to the config file
    if args.yesterday:
        args.date = format_date(datetime.now() - timedelta(days=1), conf)
    elif args.date:
        args.date = format_date(datetime.strptime(args.date, '%Y-%m-%d'), conf)

    if not args.command:
        check(get_config_option(conf, 'journal_dir'))
        write_entry(args, conf)
    else:
        args.command(args, conf)

if __name__ == '__main__':
    main()
